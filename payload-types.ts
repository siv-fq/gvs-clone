/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    blogs: Blog;
    pages: Page;
    media: Media;
    testimonials: Testimonial;
    users: User;
    authors: Author;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    authors: AuthorsSelect<false> | AuthorsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'site-settings': SiteSetting;
    navigation: Navigation;
  };
  globalsSelect: {
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
    navigation: NavigationSelect<false> | NavigationSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  title: string;
  description?: string | null;
  slug: string;
  publishedDate?: string | null;
  featuredImage?: (number | null) | Media;
  author?: (number | null) | Author;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors".
 */
export interface Author {
  id: number;
  name: string;
  position: string;
  image: number | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  slug: string;
  metaDescription?: string | null;
  featuredImage?: (number | null) | Media;
  showHeaderOnLeft?: boolean | null;
  blocks?:
    | (
        | {
            superHeading?: string | null;
            heading?: string | null;
            bgColor: 'white' | 'grayGreen';
            description?: string | null;
            removeTopSpace?: boolean | null;
            removeBottomSpace?: boolean | null;
            removeTopBorder?: boolean | null;
            removeBottomBorder?: boolean | null;
            columnsPerRow: '2' | '3' | '4' | '5';
            style: 'normal' | 'card' | 'icon';
            alignment: 'left' | 'center';
            items: {
              title?: string | null;
              content?: string | null;
              media: (number | Media)[];
              id?: string | null;
            }[];
            cta?:
              | {
                  text?: string | null;
                  link?: string | null;
                  style: 'primary' | 'secondary';
                  newTab?: boolean | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'button';
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageGrid';
          }
        | {
            superHeading?: string | null;
            heading?: string | null;
            bgColor: 'white' | 'grayGreen';
            description?: string | null;
            removeTopSpace?: boolean | null;
            removeBottomSpace?: boolean | null;
            removeTopBorder?: boolean | null;
            removeBottomBorder?: boolean | null;
            faqs: {
              question: string;
              answer: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'faqs';
          }
        | {
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | {
            superHeading?: string | null;
            heading?: string | null;
            bgColor: 'white' | 'grayGreen';
            description?: string | null;
            removeTopSpace?: boolean | null;
            removeBottomSpace?: boolean | null;
            removeTopBorder?: boolean | null;
            removeBottomBorder?: boolean | null;
            selectedTestimonials: (number | Testimonial)[];
            cta?:
              | {
                  text?: string | null;
                  link?: string | null;
                  style: 'primary' | 'secondary';
                  newTab?: boolean | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'button';
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'testimonials';
          }
        | {
            heading?: string | null;
            tocContent?:
              | {
                  heading: string;
                  content: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'tocWithContent';
          }
        | {
            superHeading?: string | null;
            heading?: string | null;
            bgColor: 'white' | 'grayGreen';
            description?: string | null;
            removeTopSpace?: boolean | null;
            removeBottomSpace?: boolean | null;
            removeTopBorder?: boolean | null;
            removeBottomBorder?: boolean | null;
            cta?:
              | {
                  text?: string | null;
                  link?: string | null;
                  style: 'primary' | 'secondary';
                  newTab?: boolean | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'button';
                }[]
              | null;
            media?: (number | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'headerCta';
          }
        | {
            superHeading?: string | null;
            heading?: string | null;
            bgColor: 'white' | 'grayGreen';
            description?: string | null;
            removeTopSpace?: boolean | null;
            removeBottomSpace?: boolean | null;
            removeTopBorder?: boolean | null;
            removeBottomBorder?: boolean | null;
            blockStyle: 'twoColumn' | 'hero';
            contentPosition: 'left' | 'right';
            eyebrowHeading?: string | null;
            selectedTestimonials?: (number | null) | Testimonial;
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            moveTwoColumnsToMedia?: boolean | null;
            twoColumnsListHeading?: string | null;
            twoColumnList?:
              | {
                  column1List?: string | null;
                  column2List?: string | null;
                  id?: string | null;
                }[]
              | null;
            cta?:
              | {
                  text?: string | null;
                  link?: string | null;
                  style: 'primary' | 'secondary';
                  newTab?: boolean | null;
                  id?: string | null;
                  blockName?: string | null;
                  blockType: 'button';
                }[]
              | null;
            mediaType: 'media' | 'embeddedVideo' | 'form' | 'none';
            media?: (number | null) | Media;
            videoLink?: string | null;
            videoCoverImage?: (number | null) | Media;
            form?: ('none' | 'contactUs') | null;
            imageStyle?: ('normal' | 'card') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'contentMedia';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: number;
  name: string;
  rating: '4' | '5';
  feedback: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  role: 'admin' | 'editor' | 'author' | 'viewer';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: number | Testimonial;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'authors';
        value: number | Author;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  slug?: T;
  publishedDate?: T;
  featuredImage?: T;
  author?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  metaDescription?: T;
  featuredImage?: T;
  showHeaderOnLeft?: T;
  blocks?:
    | T
    | {
        imageGrid?:
          | T
          | {
              superHeading?: T;
              heading?: T;
              bgColor?: T;
              description?: T;
              removeTopSpace?: T;
              removeBottomSpace?: T;
              removeTopBorder?: T;
              removeBottomBorder?: T;
              columnsPerRow?: T;
              style?: T;
              alignment?: T;
              items?:
                | T
                | {
                    title?: T;
                    content?: T;
                    media?: T;
                    id?: T;
                  };
              cta?:
                | T
                | {
                    button?:
                      | T
                      | {
                          text?: T;
                          link?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        faqs?:
          | T
          | {
              superHeading?: T;
              heading?: T;
              bgColor?: T;
              description?: T;
              removeTopSpace?: T;
              removeBottomSpace?: T;
              removeTopBorder?: T;
              removeBottomBorder?: T;
              faqs?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        richText?:
          | T
          | {
              content?: T;
              id?: T;
              blockName?: T;
            };
        testimonials?:
          | T
          | {
              superHeading?: T;
              heading?: T;
              bgColor?: T;
              description?: T;
              removeTopSpace?: T;
              removeBottomSpace?: T;
              removeTopBorder?: T;
              removeBottomBorder?: T;
              selectedTestimonials?: T;
              cta?:
                | T
                | {
                    button?:
                      | T
                      | {
                          text?: T;
                          link?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        tocWithContent?:
          | T
          | {
              heading?: T;
              tocContent?:
                | T
                | {
                    heading?: T;
                    content?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        headerCta?:
          | T
          | {
              superHeading?: T;
              heading?: T;
              bgColor?: T;
              description?: T;
              removeTopSpace?: T;
              removeBottomSpace?: T;
              removeTopBorder?: T;
              removeBottomBorder?: T;
              cta?:
                | T
                | {
                    button?:
                      | T
                      | {
                          text?: T;
                          link?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              media?: T;
              id?: T;
              blockName?: T;
            };
        contentMedia?:
          | T
          | {
              superHeading?: T;
              heading?: T;
              bgColor?: T;
              description?: T;
              removeTopSpace?: T;
              removeBottomSpace?: T;
              removeTopBorder?: T;
              removeBottomBorder?: T;
              blockStyle?: T;
              contentPosition?: T;
              eyebrowHeading?: T;
              selectedTestimonials?: T;
              content?: T;
              moveTwoColumnsToMedia?: T;
              twoColumnsListHeading?: T;
              twoColumnList?:
                | T
                | {
                    column1List?: T;
                    column2List?: T;
                    id?: T;
                  };
              cta?:
                | T
                | {
                    button?:
                      | T
                      | {
                          text?: T;
                          link?: T;
                          style?: T;
                          newTab?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              mediaType?: T;
              media?: T;
              videoLink?: T;
              videoCoverImage?: T;
              form?: T;
              imageStyle?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  name?: T;
  rating?: T;
  feedback?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authors_select".
 */
export interface AuthorsSelect<T extends boolean = true> {
  name?: T;
  position?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: number;
  siteSEO?: {
    metaDescription?: string | null;
    ogImage?: (number | null) | Media;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation".
 */
export interface Navigation {
  id: number;
  headerLinks?:
    | {
        text: string;
        url: string;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  footerLinks?:
    | {
        text: string;
        url: string;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  siteSEO?:
    | T
    | {
        metaDescription?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation_select".
 */
export interface NavigationSelect<T extends boolean = true> {
  headerLinks?:
    | T
    | {
        text?: T;
        url?: T;
        newTab?: T;
        id?: T;
      };
  footerLinks?:
    | T
    | {
        text?: T;
        url?: T;
        newTab?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'blogs';
          value: number | Blog;
        } | null)
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}